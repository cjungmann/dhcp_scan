#!/usr/bin/env bash

source mod_array_table
source mod_reqrec
source mod_parse_dhcp

is_root() { [ "$USER" == "root" ];  }

declare logfile
logfile="dhcpd.log"
# logfile="dhcpd_short.log"

# The next three functions work together to enable debugging
# of the complicated regular expression at the heart of this
# parsing program

# Dump the contents of BASH_REMATCH array, omitting the 0th
# element that is the entire match (too long and not necessary).
bash_rematch_dump()
{
    local -n ad_array="$1"
    local el
    local -i ndx=0
    for el in "${ad_array[@]}"; do
        if [ "$ndx" -gt 0 ]; then
            printf $'%2d \e[44m%s\e[m\n' "$ndx" "$el"
        fi
        (( ++ndx ))
    done
    echo
}

# This function only applies the regular expression and shows the
# results.  Use this function with 'parse_dhcp_debug_regex'.
# This function runs in place of 'parse_dhcp_line' in mod_parse_dhcp.
regex_debug_line_parser()
{
    local pdl_line="$1"
    if [[ "$pdl_line" =~ $PDL_PRegex ]]; then
        printf $'line %4d: \e[33;1m%s\e[m\n' "$RDL_LINENO" "$pdl_line"
        bash_rematch_dump "BASH_REMATCH"
        echo
    fi
}


# Process the source contents with a regular expression debugging
# function.
#
# Due to the volume of output, it is recommended that one curate a
# small logfile that includes as many examples as possible without
# undue duplication.
parse_dhcp_debug_regex()
{
    echo "Parsing DHCP data from '$logfile' to test the regular expression."
    echo
    
    declare pdr_line
    local -i PDR_LINENO=0
    while read -r "pdr_line"; do
        (( ++PDR_LINE ))
        regex_debug_line_parser "$pdr_line"
    done < "$logfile"

    cat <<EOF
Use this output to compare the aliases for subscripted BASH_REMATCH
elements in script file mod_parse_dhcp.  Make sure the subscripts of the
alias names match the numbered elements of the sample parsed log file
DHCP message lines
EOF
    echo
}



# This test version replaces the journalctl source of data with
# a textfile saved from a journalctl report.  This allows development
# and testing on a non-DHCP-server workstation.
parse_dhcp_log_file()
{
    echo "Parsing content from '$logfile'"
    echo
    local plf_line
    while read -r "plf_line"; do
        parse_dhcp_line "$plf_line"
    done < "$logfile"

    reqrec_report
}

# This most closely matches how this should work in production,
# reading entries from journalctl.  It must be run on a system
# that has isc-dhcp-server running, of course.
parse_dhcp_journalctl()
{
    echo "Parsing content from 'journalctl'"
    echo
    if is_root; then
        local pj_line
        while read -r "pj_line"; do
            parse_dhcp_line "$pj_line"
        done < <( journalctl -S yesterday -u isc-dhcp-server )
    else
        echo "You must be root to access journalctl records."
    fi

    reqrec_report
}

# parse_dhcp_debug_regex
parse_dhcp_log_file
# parse_dhcp_journalctl
