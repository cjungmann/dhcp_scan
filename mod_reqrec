# -*- mode:shell-script; sh-shell:bash -*-

# shellcheck shell=bash
# shellcheck disable=SC2125         # unquoted subscript intentional
# shellcheck disable=SC2034,SC2154  # aliases not used in defined context
# shellcheck disable=SC2206,SC2207  # ignore warning, careful with splitting

declare -A Requests

declare -a ReqRec

# These aliases work with an array-expanded reqrec record,
# hence the rr_ prefix.

declare -n rr_id=ReqRec[0]              ###< MAC or DHCP-identity (IP address for DHCPINFORM)
declare -n rr_message=ReqRec[1]         ###< DHCPDISCOVER, DHCPREQUEST, etc
declare -n rr_ip_reqested=ReqRec[2]     ###< optional, used for DHCPREQUEST
declare -n rr_request_host=ReqRec[3]    ###< set if supplied by request
declare -n rr_response=ReqRec[4]        ###< DHCPOFFER, DHCPACK, or DHCPNAK as returned by server
declare -n rr_ip_offered=ReqRec[5]      ###< permitted IP address

declare -i ReqRec_Len=6


##
# Set of domain-dependent calls to functions in modules mod_array_table:
#
reqrec_clear() { array_row_clear "ReqRec" "$ReqRec_Len"; }

reqrec_set()   { array_row_set   "ReqRec" "$ReqRec_Len" "$@"; }
reqrec_dump()  { array_row_dump  "ReqRec"; };

reqrec_row_put() { table_array_row_put "Requests" "ReqRec"; }
reqrec_row_get() { table_array_row_get "ReqRec" "Requests" "$1"; }


##
# Domain=specific functions for storing and updating DHCP requests
#

##
# @brief Create a new request record
#
# @param [in] $1  ID value, usually a MAC address
# @param [in] $2  DHCP message (DHCPDISCOVER or DHCPREQUEST)
# @param [in] $3  Optional IP address, filled for DHCPREQUEST
# @param [in] $4  Optional host name
##
reqrec_request_add()
{
    reqrec_set "$@";
    reqrec_row_put;
}

reqrec_request_response()
{
    local rrr_id="$1"
    local rrr_message="$2"
    local rrr_addr="$3"

    if reqrec_row_get "$rrr_id"; then
        # DHCPINFORM is a unique request with an unusual
        # response.  It's easier to just pull it out of the
        # normal processing and handle with code.
        if [ "$rr_message" == DHCPINFORM ]; then
            rr_ip_offered="$d_extra_id"
        else
            rr_ip_offered="$rrr_addr"
        fi

        rr_response="$rrr_message"
        reqrec_row_put
    else
        echo "There is no open request for '$rrr_id'"
    fi
}

reqrec_report()
{
    local rr_key
    for rr_key in "${!Requests[@]}"; do
        if reqrec_row_get "$rr_key"; then
            reqrec_dump
            echo
        else
            echo "Key '$rr_key' missing"
        fi
    done
}

declare rr_ifd='|'    # inter-field-delimiter
declare rr_ird=$'\n'  # inter-row-delimiter

reqrec_sort_and_display()
{
    local -n rsad_table="$1"
    local OIFS="$IFS"
    local IFS=$'\n'
    local -a new_table
    new_table=( $( sort <<< "${rsad_table[*]}" ) )

    local -a new_row
    local nline
    IFS="$rr_ifd"
    for nline in "${new_table[@]}"; do
        new_row=( $nline )
        printf "%s  %s" "${new_row[1]}" "${new_row[2]}"
        if [ "${new_row[3]}" ]; then
            printf " (host: %s)" "${new_row[3]}"
        fi
        echo
    done

    IFS="$OIFS"
}

sortilize_ip()
{
    local -n si_out="$1"

    local OIFS="$IFS"
    local IFS='.'
    local -a si_parts=( $2 )
    si_out=$( printf '%02x%02x%02x%02x' "${si_parts[@]}" )
}

reqrec_report_by_ip()
{
    local OIFS="$IFS"
    local IFS="$rr_ifd"
    local rr_key
    local sortable_ip
    local -a row
    local -a rrbi_table=()
    for rr_key in "${!Requests[@]}"; do
        ReqRec=( ${Requests[$rr_key]} )
        if [ "$rr_message" != DHCPINFORM ] && [[ "$rr_response" =~ DHCPOFFER|DHCPACK ]]; then
            if reqrec_row_get "$rr_key"; then
                sortilize_ip "sortable_ip" "$rr_ip_offered"
                row=( "$sortable_ip" "$rr_ip_offered" "$rr_id" "$rr_request_host" )
                rrbi_table+=( "${row[*]}" )
            fi
        fi
    done

    IFS="$OIFS"
    reqrec_sort_and_display "rrbi_table"
}

reqrec_report_by_mac()
{
    local OIFS="$IFS"
    local IFS="$rr_ifd"
    local rr_key
    local -a row
    local -a rrbm_table=()
    for rr_key in "${!Requests[@]}"; do
        ReqRec=( ${Requests[$rr_key]} )
        if [ "$rr_message" != DHCPINFORM ] && [[ "$rr_response" =~ DHCPOFFER|DHCPACK ]]; then
            if reqrec_row_get "$rr_key"; then
                row=( "$rr_id" "$rr_id" "$rr_ip_offered" "$rr_request_host" )
                rrbm_table+=( "${row[*]}" )
            fi
        fi
    done

    IFS="$OIFS"
    reqrec_sort_and_display "rrbm_table"
}
